package org.ftm;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.reflect.TypeToken;

import java.io.*;
import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

    class Account {
        private String accountNumber;
        private double balance;

        public Account(String accountNumber, double initialBalance) {
            this.accountNumber = accountNumber;
            this.balance = initialBalance;
        }

        public String getAccountNumber() {
            return accountNumber;
        }

        public double getBalance() {
            return balance;
        }

        public void deposit(double amount) {
            balance += amount;
        }

        public boolean withdraw(double amount) {
            if (amount <= balance) {
                balance -= amount;
                return true;
            } else {
                return false;
            }
        }

        @Override
        public String toString() {
            return "Account: " + accountNumber + ", Balance: " + balance;
        }
    }

    public class FinancialTransactionManager2 {
        private static final String ACCOUNTS_FILE = "accounts.json";
        private static final String TRANSACTIONS_FILE = "transactions.json";

        private static Map<String, Account> accounts = new HashMap<>();
        private static Gson gson = new GsonBuilder().setPrettyPrinting().create();

        public static void main(String[] args) {
            loadAccounts();
            Scanner scanner = new Scanner(System.in);
            String option;

            do {
                System.out.println("\n1. Create Account");
                System.out.println("2. Deposit");
                System.out.println("3. Withdraw");
                System.out.println("4. Transfer");
                System.out.println("5. Show Accounts");
                System.out.println("6. Save and Exit");
                System.out.print("Select an option: ");
                option = scanner.nextLine();

                switch (option) {
                    case "1":
                        createAccount(scanner);
                        break;
                    case "2":
                        deposit(scanner);
                        break;
                    case "3":
                        withdraw(scanner);
                        break;
                    case "4":
                        transfer(scanner);
                        break;
                    case "5":
                        showAccounts();
                        break;
                    case "6":
                        saveAccounts();
                        System.out.println("Data saved. Exiting...");
                        break;
                    default:
                        System.out.println("Invalid option. Try again.");
                }
            } while (!option.equals("6"));
        }

        private static void createAccount(Scanner scanner) {
            System.out.print("Enter account number: ");
            String accountNumber = scanner.nextLine();
            System.out.print("Enter initial balance: ");
            double initialBalance = Double.parseDouble(scanner.nextLine());
            accounts.put(accountNumber, new Account(accountNumber, initialBalance));
        }

        private static void deposit(Scanner scanner) {
            System.out.print("Enter account number: ");
            String accountNumber = scanner.nextLine();
            Account account = accounts.get(accountNumber);

            if (account != null) {
                System.out.print("Enter amount to deposit: ");
                double amount = Double.parseDouble(scanner.nextLine());
                account.deposit(amount);
                logTransaction("Deposit", accountNumber, amount);
            } else {
                System.out.println("Account not found.");
            }
        }

        private static void withdraw(Scanner scanner) {
            System.out.print("Enter account number: ");
            String accountNumber = scanner.nextLine();
            Account account = accounts.get(accountNumber);

            if (account != null) {
                System.out.print("Enter amount to withdraw: ");
                double amount = Double.parseDouble(scanner.nextLine());
                if (account.withdraw(amount)) {
                    logTransaction("Withdrawal", accountNumber, amount);
                } else {
                    System.out.println("Insufficient funds.");
                }
            } else {
                System.out.println("Account not found.");
            }
        }

        private static void transfer(Scanner scanner) {
            System.out.print("Enter source account number: ");
            String sourceAccountNumber = scanner.nextLine();
            System.out.print("Enter destination account number: ");
            String destinationAccountNumber = scanner.nextLine();

            Account sourceAccount = accounts.get(sourceAccountNumber);
            Account destinationAccount = accounts.get(destinationAccountNumber);

            if (sourceAccount != null && destinationAccount != null) {
                System.out.print("Enter amount to transfer: ");
                double amount = Double.parseDouble(scanner.nextLine());

                if (sourceAccount.withdraw(amount)) {
                    destinationAccount.deposit(amount);
                    logTransaction("Transfer", sourceAccountNumber + " -> " + destinationAccountNumber, amount);
                } else {
                    System.out.println("Insufficient funds in source account.");
                }
            } else {
                System.out.println("One or both accounts not found.");
            }
        }

        private static void showAccounts() {
            if (accounts.isEmpty()) {
                System.out.println("No accounts available.");
            } else {
                for (Account account : accounts.values()) {
                    System.out.println(account);
                }
            }
        }

        private static void logTransaction(String type, String details, double amount) {
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(TRANSACTIONS_FILE, true))) {
                writer.write(gson.toJson(Map.of(
                        "type", type,
                        "details", details,
                        "amount", amount
                )));
                writer.newLine();
            } catch (IOException e) {
                System.out.println("Error logging transaction: " + e.getMessage());
            }
        }

        private static void saveAccounts() {
            try (Writer writer = new FileWriter(ACCOUNTS_FILE)) {
                gson.toJson(accounts, writer);
            } catch (IOException e) {
                System.out.println("Error saving accounts: " + e.getMessage());
            }
        }

        private static void loadAccounts() {
            try (Reader reader = new FileReader(ACCOUNTS_FILE)) {
                Type type = new TypeToken<Map<String, Account>>() {}.getType();
                accounts = gson.fromJson(reader, type);
                if (accounts == null) {
                    accounts = new HashMap<>();
                }
            } catch (FileNotFoundException e) {
                System.out.println("No saved accounts found.");
            } catch (IOException e) {
                System.out.println("Error loading accounts: " + e.getMessage());
            }
        }
    }

